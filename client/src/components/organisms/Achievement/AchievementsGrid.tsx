import { useState, useRef, useEffect } from 'react';
import styles from './AchievementsGrid.module.css';

const achievements = [
  { icon: 'üéØ', title: '–°–Ω–∞–π–ø–µ—Ä –ø—Ä–æ–¥–∞–∂', unlocked: true },
  { icon: 'üöÄ', title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ç—É—Ä–∞–≥–µ–Ω—Ç', unlocked: true },
  { icon: 'üåç', title: '–ó–Ω–∞—Ç–æ–∫ –¢—É—Ä—Ü–∏–∏', unlocked: true },
  { icon: 'üî•', title: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', unlocked: true },
  { icon: 'üéì', title: '–û—Ç–ª–∏—á–Ω–∏–∫ –∫–≤–∏–∑–æ–≤', unlocked: true },
  { icon: 'üíé', title: '–ó–Ω–∞—Ç–æ–∫ luxury', unlocked: false },
  { icon: 'üèÜ', title: '–ß–µ–º–ø–∏–æ–Ω –º–µ—Å—è—Ü–∞', unlocked: false },
  { icon: '‚≠ê', title: '–ó–≤–µ–∑–¥–∞ —Å–µ—Ä–≤–∏—Å–∞', unlocked: true },
  { icon: 'üé™', title: '–ú–∞—Å—Ç–µ—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π', unlocked: false },
  { icon: 'üå¥', title: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª—è–∂–Ω–æ–º—É –æ—Ç–¥—ã—Ö—É', unlocked: true },
  { icon: 'üèîÔ∏è', title: '–ì–æ—Ä–Ω—ã–π –≥–∏–¥', unlocked: false },
  { icon: 'üé®', title: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', unlocked: true },
];

export const AchievementsGrid = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isAutoPlaying, setIsAutoPlaying] = useState(true);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const carouselRef = useRef<HTMLDivElement>(null);
  const slidesPerView = 4; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  const totalSlides = achievements.length;

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const infiniteAchievements = [
    ...achievements,
    ...achievements,
    ...achievements,
  ];

  useEffect(() => {
    if (!isAutoPlaying) return;

    const interval = setInterval(() => {
      setCurrentSlide((prev) => {
        const nextSlide = prev + 1;
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—É
        if (nextSlide >= totalSlides) {
          return 0;
        }
        return nextSlide;
      });
    }, 3000);

    return () => clearInterval(interval);
  }, [isAutoPlaying, totalSlides]);

  const handleIndicatorClick = (index: number) => {
    setCurrentSlide(index);
    setIsAutoPlaying(false);
    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => setIsAutoPlaying(true), 5000);
  };

  const handleSwipe = (direction: 'left' | 'right') => {
    if (isTransitioning) return;

    setIsTransitioning(true);

    if (direction === 'left') {
      setCurrentSlide((prev) => {
        const nextSlide = prev + 1;
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—É
        if (nextSlide >= totalSlides) {
          return 0;
        }
        return nextSlide;
      });
    } else {
      setCurrentSlide((prev) => {
        const prevSlide = prev - 1;
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ü—É
        if (prevSlide < 0) {
          return totalSlides - 1;
        }
        return prevSlide;
      });
    }

    setIsAutoPlaying(false);
    setTimeout(() => {
      setIsTransitioning(false);
      setIsAutoPlaying(true);
    }, 500);
  };

  // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const getTransformValue = () => {
    const slideWidth = 100 / slidesPerView;
    const offset = currentSlide * slideWidth;
    return `translateX(-${offset}%)`;
  };

  return (
    <div className={styles.achievementsWrapper}>
      <div className={styles.achievementsTitle}>
        <span role="img" aria-label="medal">
          üèÖ
        </span>{' '}
        –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      </div>

      <div className={styles.carouselContainer}>
        <div
          ref={carouselRef}
          className={styles.carousel}
          style={{
            transform: getTransformValue(),
            transition: isTransitioning ? 'transform 0.5s ease-in-out' : 'none',
          }}
        >
          {infiniteAchievements.map((ach, idx) => (
            <div
              key={idx}
              className={`${styles.achievement} ${!ach.unlocked ? styles.locked : ''}`}
            >
              <div className={styles.achievementIcon}>{ach.icon}</div>
              <div className={styles.achievementTitle}>{ach.title}</div>
            </div>
          ))}
        </div>

        <button
          className={`${styles.carouselButton} ${styles.carouselButtonLeft}`}
          onClick={() => handleSwipe('right')}
          aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥"
          disabled={isTransitioning}
        >
          ‚Äπ
        </button>
        <button
          className={`${styles.carouselButton} ${styles.carouselButtonRight}`}
          onClick={() => handleSwipe('left')}
          aria-label="–°–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥"
          disabled={isTransitioning}
        >
          ‚Ä∫
        </button>
      </div>

      <div className={styles.carouselIndicators}>
        {Array.from(
          { length: Math.ceil(totalSlides / slidesPerView) },
          (_, i) => (
            <button
              key={i}
              className={`${styles.carouselIndicator} ${
                Math.floor(currentSlide / slidesPerView) === i
                  ? styles.carouselIndicatorActive
                  : ''
              }`}
              onClick={() => handleIndicatorClick(i * slidesPerView)}
              aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–∞–π–¥—É ${i + 1}`}
            />
          ),
        )}
      </div>
    </div>
  );
};

export default AchievementsGrid;
