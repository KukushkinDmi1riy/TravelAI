// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  firstName         String
  lastName          String
  role              String   @default("user")
  status            String   @default("active")
  email             String   @unique
  passwordHash      String
  isApprovedByAdmin Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  progress           UserProgress?
  achievements       UserAchievement[]
  lessonProgress     UserLessonProgress[]
  activityLogs       DailyActivityLog[]
  quizResults        QuizResult[]
  leaderboardEntries LeaderboardEntry[]
  team               Team?    @relation("TeamMembers", fields: [teamId], references: [id])
  teamId             String?
}

model UserProgress {
  id        String   @id @default(cuid())
  userId    String   @unique
  xp        Int      @default(0)
  level     Int      @default(1)
  streak    Int      @default(0) // days in a row
  accuracy  Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String
  icon        String

  users UserAchievement[]
}

model UserAchievement {
  id             String   @id @default(cuid())
  userId         String
  achievementId  String
  achievedAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  members   User[]   @relation("TeamMembers")
  results   TeamBattleResult[]
}

model TeamBattleResult {
  id        String   @id @default(cuid())
  teamId    String
  score     Int
  date      DateTime
  position  Int

  team Team @relation(fields: [teamId], references: [id])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  topic       String
  content     String
  durationMin Int
  createdAt   DateTime @default(now())

  progress    UserLessonProgress[]
}

model UserLessonProgress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  status     String   @default("completed")
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

// активность по дням (для streak)
model DailyActivityLog {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime
  activity String  //например, "lesson", "quiz", "battle"

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model QuizResult {
  id        String   @id @default(cuid())
  userId    String
  score     Int
  total     Int
  passedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// кэшированные позиции рейтинга
model LeaderboardEntry {
  id           String   @id @default(cuid())
  userId       String
  xp           Int
  rank         Int
  snapshotDate DateTime

  user User @relation(fields: [userId], references: [id])
}
