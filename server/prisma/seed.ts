import { PrismaClient } from '../src/generated/prisma';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function up() {
  console.log('üå± –ù–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

  // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\nüë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  const usersData = [
    {
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@example.com',
      role: 'user',
      status: 'active',
      isApprovedByAdmin: true,
    },
    {
      firstName: 'Jane',
      lastName: 'Smith',
      email: 'jane.smith@example.com',
      role: 'user',
      status: 'active',
      isApprovedByAdmin: true,
    },
    {
      firstName: 'Admin',
      lastName: 'Administrator',
      email: 'admin@example.com',
      role: 'admin',
      status: 'active',
      isApprovedByAdmin: true,
    },
    {
      firstName: 'Pending',
      lastName: 'User',
      email: 'pending@example.com',
      role: 'user',
      status: 'active',
      isApprovedByAdmin: false,
    },
  ];

  const createdUsers: any[] = [];
  for (const userData of usersData) {
    const passwordHash = bcrypt.hashSync('password123', 12);
    const user = await prisma.user.create({
      data: {
        ...userData,
        passwordHash,
      },
    });
    createdUsers.push(user);
    console.log(
      `  ‚úì ${userData.firstName} ${userData.lastName} (${userData.email})`,
    );
  }

  // 2. –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  console.log('\nüèÜ –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...');
  const achievementsData = [
    {
      code: 'FIRST_LOGIN',
      name: '–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥',
      description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –≤–ø–µ—Ä–≤—ã–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
      icon: 'üëã',
    },
    {
      code: 'WEEK_STREAK',
      name: '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥',
      description: '–ó–∞—Ö–æ–¥–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      icon: 'üî•',
    },
    {
      code: 'HUNDRED_XP',
      name: '–°–æ—Ç–Ω—è –æ—á–∫–æ–≤',
      description: '–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞',
      icon: 'üíØ',
    },
    {
      code: 'PERFECT_QUIZ',
      name: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç',
      description: '–ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –Ω–∞ 100%',
      icon: '‚≠ê',
    },
    {
      code: 'TEAM_PLAYER',
      name: '–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫',
      description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ',
      icon: 'ü§ù',
    },
  ];

  const createdAchievements: any[] = [];
  for (const achievementData of achievementsData) {
    const achievement = await prisma.achievement.create({
      data: achievementData,
    });
    createdAchievements.push(achievement);
    console.log(`  ‚úì ${achievementData.name} (${achievementData.code})`);
  }

  // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\nüìä –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  const progressData = [
    {
      userId: createdUsers[0].id,
      xp: 150,
      level: 2,
      streak: 3,
      accuracy: 0.85,
    }, // John
    {
      userId: createdUsers[1].id,
      xp: 320,
      level: 3,
      streak: 7,
      accuracy: 0.92,
    }, // Jane
    {
      userId: createdUsers[2].id,
      xp: 500,
      level: 5,
      streak: 14,
      accuracy: 0.98,
    }, // Admin
    { userId: createdUsers[3].id, xp: 50, level: 1, streak: 1, accuracy: 0.7 }, // Pending
  ];

  for (let i = 0; i < progressData.length; i++) {
    const progress = await prisma.userProgress.create({
      data: progressData[i],
    });
    console.log(
      `  ‚úì ${createdUsers[i].firstName}: ${progress.xp} XP, —É—Ä–æ–≤–µ–Ω—å ${progress.level}`,
    );
  }

  // 4. –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
  console.log('\nüéñÔ∏è  –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏...');
  const userAchievements = [
    // John –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –∏ —Å–æ—Ç–Ω—é –æ—á–∫–æ–≤
    { userId: createdUsers[0].id, achievementId: createdAchievements[0].id },
    { userId: createdUsers[0].id, achievementId: createdAchievements[2].id },

    // Jane –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥, –Ω–µ–¥–µ–ª—é –ø–æ–¥—Ä—è–¥ –∏ —Å–æ—Ç–Ω—é –æ—á–∫–æ–≤
    { userId: createdUsers[1].id, achievementId: createdAchievements[0].id },
    { userId: createdUsers[1].id, achievementId: createdAchievements[1].id },
    { userId: createdUsers[1].id, achievementId: createdAchievements[2].id },

    // Admin –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    { userId: createdUsers[2].id, achievementId: createdAchievements[0].id },
    { userId: createdUsers[2].id, achievementId: createdAchievements[1].id },
    { userId: createdUsers[2].id, achievementId: createdAchievements[2].id },
    { userId: createdUsers[2].id, achievementId: createdAchievements[3].id },
    { userId: createdUsers[2].id, achievementId: createdAchievements[4].id },

    // Pending –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥
    { userId: createdUsers[3].id, achievementId: createdAchievements[0].id },
  ];

  for (const userAchievement of userAchievements) {
    await prisma.userAchievement.create({
      data: userAchievement,
    });
  }

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
  for (const user of createdUsers) {
    const achievementCount = await prisma.userAchievement.count({
      where: { userId: user.id },
    });
    console.log(`  ‚úì ${user.firstName}: ${achievementCount} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
  }
}

async function down() {
  console.log('üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã...');

  // –û—á–∏—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
  try {
    await prisma.$executeRaw`TRUNCATE TABLE "UserAchievement" RESTART IDENTITY CASCADE`;
    console.log('  ‚úì UserAchievement –æ—á–∏—â–µ–Ω–∞');
  } catch (e) {
    console.log('  ‚ö†Ô∏è UserAchievement –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞');
  }

  try {
    await prisma.$executeRaw`TRUNCATE TABLE "UserProgress" RESTART IDENTITY CASCADE`;
    console.log('  ‚úì UserProgress –æ—á–∏—â–µ–Ω–∞');
  } catch (e) {
    console.log('  ‚ö†Ô∏è UserProgress –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞');
  }

  try {
    await prisma.$executeRaw`TRUNCATE TABLE "Achievement" RESTART IDENTITY CASCADE`;
    console.log('  ‚úì Achievement –æ—á–∏—â–µ–Ω–∞');
  } catch (e) {
    console.log('  ‚ö†Ô∏è Achievement –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞');
  }

  try {
    await prisma.$executeRaw`TRUNCATE TABLE "User" RESTART IDENTITY CASCADE`;
    console.log('  ‚úì User –æ—á–∏—â–µ–Ω–∞');
  } catch (e) {
    console.log('  ‚ö†Ô∏è User –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞');
  }

  console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã –∏ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–¥–æ–≤...');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await down();

    // –ó–∞—Ç–µ–º –Ω–∞–ø–æ–ª–Ω—è–µ–º
    await up();

    console.log('\nüîê –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: password123');
    console.log('üéâ –°–∏–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–¥–æ–≤:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
