// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ n8n workflow
// –ó–∞–ø—É—Å–∫: node test-n8n-workflow.js

const testN8nWorkflow = async () => {
  const webhookUrl = 'https://n8n.gulnazbakinova.com/webhook/travel_bd_test';

  const testPayload = {
    userId: 'test-user-123',
    userMessage:
      '–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ü–∞—Ä–∏–∂ –Ω–∞ 5 –¥–Ω–µ–π. –ë—é–¥–∂–µ—Ç —Å—Ä–µ–¥–Ω–∏–π. –ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?',
    conversationHistory: [
      {
        id: 'msg-1',
        userId: 'test-user-123',
        message: '–ü—Ä–∏–≤–µ—Ç!',
        timestamp: new Date().toISOString(),
        isFromUser: true,
      },
    ],
    context: {
      userProfile: {
        firstName: '–¢–µ—Å—Ç',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: 'test@example.com',
      },
      travelPreferences: {
        budget: 'medium',
        duration: '5 days',
        destination: 'Paris',
        interests: ['culture', 'food', 'sightseeing'],
      },
      currentLocation: '–ú–æ—Å–∫–≤–∞',
    },
  };

  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ n8n workflow...');
  console.log('URL:', webhookUrl);
  console.log('Payload:', JSON.stringify(testPayload, null, 2));

  try {
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TravelAI-Test/1.0',
      },
      body: JSON.stringify(testPayload),
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log(
      'üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:',
      Object.fromEntries(response.headers.entries()),
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const responseData = await response.json();
    console.log('\nüì• –û—Ç–≤–µ—Ç –æ—Ç n8n workflow:');
    console.log(JSON.stringify(responseData, null, 2));

    // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:');

    if (responseData.message === 'Workflow was started') {
      console.log(
        '‚ùå Workflow –∑–∞–ø—É—â–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ - –Ω—É–∂–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞',
      );
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('   1. –î–æ–±–∞–≤—å—Ç–µ "Respond to Webhook" —É–∑–µ–ª –≤ n8n');
      console.log('   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI Agent –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
      console.log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º workflow');
    } else if (responseData.response || responseData.aiResponse) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞!');
      console.log(
        'üìù –û—Ç–≤–µ—Ç:',
        responseData.response || responseData.aiResponse,
      );
      if (responseData.suggestions) {
        console.log('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', responseData.suggestions);
      }
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
      console.log(
        'üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: { response: "...", suggestions: [...] }',
      );
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL webhook');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ n8n workflow –∞–∫—Ç–∏–≤–µ–Ω');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI Agent –≤ n8n');
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testN8nWorkflow();
