// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ polling —Å–∏—Å—Ç–µ–º—ã
// –ó–∞–ø—É—Å–∫: node test-polling.js

const testPollingSystem = async () => {
  const API_BASE_URL = 'http://localhost:3005/api';

  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ polling —Å–∏—Å—Ç–µ–º—ã...');

  try {
    // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('\nüì§ –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    const sendResponse = await fetch(`${API_BASE_URL}/chat/send-message`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      },
      body: JSON.stringify({
        message: '–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥–∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
        conversationHistory: [],
        context: {
          userProfile: {
            firstName: '–¢–µ—Å—Ç',
            lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          },
        },
      }),
    });

    if (!sendResponse.ok) {
      throw new Error(`HTTP error! status: ${sendResponse.status}`);
    }

    const sendData = await sendResponse.json();
    console.log('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(sendData, null, 2));

    if (!sendData.requestId) {
      console.log('‚ùå requestId –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      return;
    }

    console.log('‚úÖ requestId –ø–æ–ª—É—á–µ–Ω:', sendData.requestId);

    // –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º polling
    console.log('\nüì• –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ polling...');

    for (let i = 1; i <= 5; i++) {
      console.log(`\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i}/5...`);

      const pollResponse = await fetch(
        `${API_BASE_URL}/chat/poll-response/${sendData.requestId}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            // –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          },
        },
      );

      const pollData = await pollResponse.json();
      console.log('–°—Ç–∞—Ç—É—Å polling:', pollResponse.status);
      console.log('–û—Ç–≤–µ—Ç polling:', JSON.stringify(pollData, null, 2));

      if (pollData.success && pollData.aiResponse) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!');
        break;
      }

      if (i < 5) {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...');
        await new Promise((resolve) => setTimeout(resolve, 3000));
      }
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç polling –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testPollingSystem();
